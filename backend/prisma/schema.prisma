generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model account {
  id                String  @id
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              user    @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Account_userId_fkey")

  @@unique([provider, providerAccountId], map: "Account_provider_providerAccountId_key")
  @@index([userId], map: "Account_userId_fkey")
}

model cron {
  id        Int         @id @default(autoincrement())
  timing    cron_timing @default(WEEKLY)
  createdAt DateTime    @default(now())
  updatedAt DateTime
}

model cronhistory {
  id            Int                @id @default(autoincrement())
  links         Json
  data          Json
  status        cronhistory_status @default(PENDING)
  startTime     DateTime?
  endTime       DateTime?
  failureReason String?
  createdAt     DateTime           @default(now())
  updatedAt     DateTime
}

model domains {
  id                 Int                        @id @default(autoincrement())
  name               String?
  domain             String                     @unique(map: "Domains_domain_key")
  isActive           Boolean                    @default(true)
  status             domains_status             @default(NOT_CONFIGURED)
  storeImages        Boolean                    @default(false)
  priceElement       Json
  priceElementStatus domains_priceElementStatus @default(NOT_FOUND)
  createdAt          DateTime                   @default(now())
  updatedAt          DateTime
  domainImage        String?
  includeParams      Boolean                    @default(true)
  links              links[]
  userdomainmap      userdomainmap[]

  @@index([domain], map: "Domains_domain_idx")
}

model linkdata {
  id            Int             @id @default(autoincrement())
  status        linkdata_status @default(PENDING)
  images        Json
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  failedReason  String?
  hashedUrl     String
  metadata      Json
  htmlObjectKey String          @db.LongText
  screenshotKey String          @db.LongText
  thumbnailKey  String          @db.LongText
  timing        linkdata_timing

  @@unique([hashedUrl, createdAt], map: "LinkData_hashedUrl_createdAt_key")
  @@index([createdAt], map: "LinkData_createdAt_idx")
  @@index([hashedUrl], map: "LinkData_hashedUrl_idx")
}

model links {
  id               Int           @id @default(autoincrement())
  url              String        @db.LongText
  hashedUrl        String        @unique(map: "Links_hashedUrl_key")
  params           String?
  isActive         Boolean       @default(true)
  trackingImage    Boolean       @default(false)
  imageUrl         String?
  hasConfigChanged Boolean       @default(false)
  timing           links_timing  @default(WEEKLY)
  domainId         Int
  createdAt        DateTime      @default(now())
  updatedAt        DateTime
  domains          domains       @relation(fields: [domainId], references: [id], map: "Links_domainId_fkey")
  userlinkmap      userlinkmap[]

  @@index([domainId], map: "Links_domainId_idx")
  @@index([hashedUrl], map: "Links_hashedUrl_idx")
  @@index([isActive])
}

model notifications {
  id          Int                    @id @default(autoincrement())
  userId      String
  message     String
  description String?
  readStatus  Boolean                @default(false)
  priority    notifications_priority @default(LOW)
  createdAt   DateTime               @default(now())
  updatedAt   DateTime
  user        user                   @relation(fields: [userId], references: [id], map: "Notifications_userId_fkey")

  @@index([userId], map: "Notifications_userId_fkey")
}

model organization {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime
  creatorId String   @unique(map: "Organization_creatorId_key")
  user      user     @relation(fields: [creatorId], references: [id], map: "Organization_creatorId_fkey")
}

model session {
  id           String   @id
  sessionToken String   @unique(map: "Session_sessionToken_key")
  userId       String
  expires      DateTime
  user         user     @relation(fields: [userId], references: [id], onDelete: Cascade, map: "Session_userId_fkey")

  @@index([userId], map: "Session_userId_fkey")
}

model user {
  id            String          @id
  name          String?
  email         String          @unique(map: "User_email_key")
  emailVerified DateTime?
  image         String?
  password      String?
  role          user_role       @default(USER)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  account       account[]
  notifications notifications[]
  organization  organization?
  session       session[]
  userdomainmap userdomainmap[]
  userlinkmap   userlinkmap[]
}

model userdomainmap {
  id        Int      @id @default(autoincrement())
  userId    String
  domainId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime
  domains   domains  @relation(fields: [domainId], references: [id], map: "UserDomainMap_domainId_fkey")
  user      user     @relation(fields: [userId], references: [id], map: "UserDomainMap_userId_fkey")

  @@unique([userId, domainId], map: "UserDomainMap_userId_domainId_key")
  @@index([domainId], map: "UserDomainMap_domainId_fkey")
  @@index([userId, domainId], map: "UserDomainMap_userId_domainId_idx")
}

model userlinkmap {
  id           Int                @id @default(autoincrement())
  assignedName String?
  tags         String?
  userId       String
  linkId       Int
  timing       userlinkmap_timing @default(WEEKLY)
  createdAt    DateTime           @default(now())
  updatedAt    DateTime
  links        links              @relation(fields: [linkId], references: [id], map: "UserLinkMap_linkId_fkey")
  user         user               @relation(fields: [userId], references: [id], map: "UserLinkMap_userId_fkey")

  @@unique([userId, linkId], map: "UserLinkMap_userId_linkId_key")
  @@index([linkId], map: "UserLinkMap_linkId_fkey")
  @@index([userId, linkId], map: "UserLinkMap_userId_linkId_idx")
}

model verificationrequest {
  id         String   @id
  identifier String
  token      String   @unique(map: "VerificationRequest_token_key")
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  @@unique([identifier, token], map: "VerificationRequest_identifier_token_key")
}

model verificationtoken {
  identifier String
  token      String   @unique(map: "VerificationToken_token_key")
  expires    DateTime

  @@unique([identifier, token], map: "VerificationToken_identifier_token_key")
}

enum cron_timing {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

enum linkdata_status {
  SUCCESS
  FAILED
  PENDING
  CRON_FAILED
}

enum cronhistory_status {
  SUCCESS
  PENDING
  FAILED
}

enum domains_status {
  CONFIGURED
  NOT_CONFIGURED
  EXCLUDED
}

enum notifications_priority {
  HIGH
  LOW
}

enum user_role {
  USER
  ADMIN
}

enum userlinkmap_timing {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

enum domains_priceElementStatus {
  SINGLE
  MULTIPLE
  NOT_FOUND
}

enum links_timing {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}

enum linkdata_timing {
  HOURLY
  DAILY
  WEEKLY
  MONTHLY
}
